210705 패스트 캠퍼스 - Ch 2. JS 시작하기


01. 개요(ECMAScript) 및 프로젝트 초기화

ECMA Script (애크마, ES)
: JS가 표준화된 문법 - ES6, ES2015... JS의 버전임

작업 폴더 세팅하자
$npm init -y : package.json 생성
$npm install parcel-bundler -D : 모듈 폴더, lock 파일 생성

-> json 파일에서 "scripts" 지정
-> index.html, main.js 파일 생성

$npm run dev : 로컬 환경에 개발 서버 ON


02. 데이터 타입 확인

명령 : console.log("hello world");

console.log(typeof "hello world");
-> typeof : 특정 data의 type 출력
-> string, number, boolean, undefined, object

*undefined vs null
: 의도 없음 / 있음
-> null 의 type는 object

-> 객체와 배열 data를 더 자세히 type을 구분해보자
함수 getType를 만들자

function getType(data) {
  return Object.prototype.toString.call(data);
}
-> slice 메소드로 특정 문자만 나오도록 출력
return Object.prototype.toString.call(data).slice(8, -1);


export default function getType(data)
-> 다른 파일로 export 할 수 있음
-> 경로 지정 반드시 필요!!


03. 산술, 할당 연산자

* 산술 연산자 (arithmetic operator)
사칙 연산 포함 ㅇㅇ

* 할당 연산자 (assignment operator)

const로 변수 선언할 때 '='
a += 2 -> 재할당


04. 비교, 논리 연산자

* 비교 연산자 (comparison operator)

=== : 일치 연산자 -> true/false
2 === '2' -> false : 숫자 - 문자 ㅇㅇ

!== : 다른 것인지 비일치 check
<, >, >=, <= 등등


* 논리 연산자 (logical operator)

&& : 모두 true일 때 true
-> 하나라도 false면 false
"AND"

|| : 하나라도 true일 때 true
-> 모두 false면 false
"OR"

! : 부정
"NOT"


05. 삼항 연산자 (ternary operator)

if문으로 true면 첫 번째 block 부분 실행
false면 두 번째 block

-> 삼항 연산자로 더 간단하게 표현해보자

console.log(a ? "참" : "거짓");
-> 항 3개로 조건을 만든다
bool로 반환된다
true면 참, false면 거짓 출력


06. 조건문 If else

먼저 random() 함수 설정

if -> 첫 번째 조건
else if -> if 틀리면 추가 조건 (중간 조건)
else if -> 또 틀리면 추가 조건
else -> 다 틀리면


07. 조건문 switch

: 변수 값에 따라서. 상황에 따라서
-> 정확히 무엇인지 특정 조건문 작성 가능
break로 멈추고
다 만족 안하면 default

switch (ran) {
  case 0:
    console.log("is 0");
    break;
  case 2:
    console.log("is 2");
    break;
  case 4:
    console.log("is 4");
    break;

  default:
    console.log("rest...");
}


08. 반복문 For

for (시작조건; 종료조건; 변화조건) { }

for (let i = 0; i < 3; i += 1) {
  console.log(i);
}

* HTML 파일에 출력해보자

const ulEl = document.querySelector("ul");
for (let i = 0; i < 3; i += 1) {
  console.log(i);
  const li = document.createElement("li");
  li.textContent = `list-${i + 1}`;
  ulEl.appendChild(li);
}


09. 변수 유효범위 (Variable Scope)

: var, let, const

변수가 선언되어져 있는 Block이 유효 범위 ㅇㅇ
괄호 내에서 const 선언하고 console.log 같이 있어야
유효한 범위 내에 있는 거임 ㅇㅇ

'블록 레벨'의 유효범위 check
var은 별로임. 메모리 누수 ㄱㄴ
let, const로 블록 레벨 유효하도록 쓰자



10. 형 변환 (Type Conversion)

const A = 1;
const B = "1";

console.log(A === B);
console.log(A == B);
-> == : 동등 연산자인데
의도하지 않게 같다고 나올 수도 있다...

'형 변환'이 되어 같은 type로 변하게 된다

- Truthy (참 같은 값)
: true, {}, [], 1, 2, 'false', -12, '3.14'...

- Falsy (거짓 같은 값)
: false, '', null, undefined, 0, -0, NaN (Not a Number, 숫자 data)















